FUNCTION w_thaco_line2branch,line
	CASE line OF
		3 : branch=1
		4 : branch=1
		5 : branch=1
		6 : branch=1
		ELSE : branch=0
	ENDCASE	
	RETURN,branch
END


PRO w_thaco_reset_invrho,u
	u.inv.psin=0
	u.inv.ra=0
	u.inv.rmid=0
	widget_control,u.id.inv_psin,set_button=0
	widget_control,u.id.inv_ra,set_button=0
	widget_control,u.id.inv_rmid,set_button=0
END

PRO w_thaco_write_actstr,u
	widget_control,u.id.message,set_value='SHOT/LINE/THT = '+num2str(u.shot,1)+' / '+num2str(u.line,1)+' / '+num2str(u.tht,1)+' set to ACTIVE',/app
END

PRO w_thaco_write_linelist,u
	line=[0,1,2,3,4,5,6,7,8]
	line_label=['w','x','z','lya1','4d','J','w','lya1','4d']
	line_z=[18,18,18,18,42,18,20,18,42,18,20]
	hirexsr_load_wavelengths,u.shot,lam_o,z,label
	FOR i=0,n(line) DO BEGIN
		ilam=lam_o[where(z EQ line_z[i] AND label EQ line_label[i])]
		IF line[i] EQ 7 or line[i] EQ 8 THEN extra=' (on Branch A)' ELSE extra=''
		str='LINE='+num2str(line[i],1)+' '+read_atomic_name(line_z[i])+' '+line_label[i]+' @ '+num2str(ilam,dp=5)+' [Ang]'+extra
		widget_control,u.id.message,set_value=str,/app
	ENDFOR
END

PRO w_thaco_write_morder,u,A=A,B=B
	IF keyword_set(A) THEN BEGIN
		morder=u.A.morder
		str=num2str(morder[0],1)
		FOR i=1,n(morder) DO str+=','+num2str(morder[i],1)
		widget_control,u.id.morderA,set_value=str
        ENDIF

	IF keyword_set(B) THEN BEGIN
		morder=u.B.morder
		str=num2str(morder[0],1)
		FOR i=1,n(morder) DO str+=','+num2str(morder[i],1)
		widget_control,u.id.morderB,set_value=str
	ENDIF
END

PRO w_thaco_write_cbstr,u
	IF total(u.cb.branch) NE 0 THEN BEGIN
		IF total(u.cb.branch) EQ 2 THEN BEGIN
			brstr='branches A and B'
		ENDIF ELSE BEGIN
			IF u.cb.branch[0] THEN brstr='branch A' ELSE brstr='branch B'
                ENDELSE
		datstr=''
		IF u.cb.chmap THEN datstr+='CHMAP '
		IF u.cb.good THEN datstr+='GOOD '
		IF u.cb.tmap THEN datstr+='TMAP '
		IF datstr NE '' THEN widget_control,u.id.message,set_value=datstr+'binning data for '+brstr+' will be copied from THT '+$
			num2str(u.cb.tht,1)+' of SHOT '+num2str(u.cb.shot,1) ,/app ELSE widget_control,u.id.message,set_value='COPYBIN ERROR: no binning data selected',/app
	ENDIF ELSE widget_control,u.id.message,set_value='COPYBIN ERROR: no spectrometer branches selected',/app
END

PRO w_thaco_write_ctstr,u
	datstr=''
	IF u.ct.bin THEN datstr+='BIN '
	IF u.ct.mom THEN datstr+='MOM '
	IF u.ct.prof THEN datstr+='PROF '
	IF datstr NE '' THEN newstr=', copying '+datstr+'from THT '+num2str(u.ct.from,1) ELSE newstr=''
	widget_control,u.id.message,set_value='THT '+num2str(u.ct.new,1)+' will be created'+newstr,/app
	IF u.chk.status[u.ct.new] EQ 1 THEN widget_control,u.id.message,set_value='***WARNING: THT='+num2str(u.ct.new,1)+' ALREADY EXISTS***',/app
	IF datstr NE '' AND u.chk.status[u.ct.from] NE 1 THEN widget_control,u.id.message,set_value='***WARNING: THT='+num2str(u.ct.from,1)+' DOES NOT EXIST***',/app

END	

PRO w_thaco_write_avestr,u,A=A,B=B
	m1str='NAVE will be taken from CHMAP size'
	IF keyword_set(A) THEN BEGIN
		IF u.A.nave EQ -1 THEN astr=m1str ELSE astr='AVESPEC will average over NAVE='+num2str(u.A.nave,1)+' points'
		widget_control,u.id.message,set_value='Branch A '+astr,/app	
        ENDIF 
	IF keyword_set(B) THEN BEGIN
		IF u.B.nave EQ -1 THEN bstr=m1str ELSE bstr='AVESPEC will average over NAVE='+num2str(u.B.nave,1)+' points'
		widget_control,u.id.message,set_value='Branch B '+bstr,/app
	ENDIF	
	IF u.branch EQ 0 THEN widget_control,u.id.run_nave,set_value=num2str(u.A.nave,1)
	IF u.branch EQ 1 THEN widget_control,u.id.run_nave,set_value=num2str(u.B.nave,1)
END

PRO w_thaco_write_fitstr,u
	skip='***Non-linear Fitting Stage Will be Skipped***'
	fit='order n='+num2str(u.fit.nback,1)+' polynomial and the '+u.fit.tree+' EFIT tree will be used in FITSPEC'
	widget_control,u.id.message,set_value=fit,/app
	widget_control,u.id.run_nback,set_value=num2str(u.fit.nback,1)
	IF u.fit.nofit THEN widget_control,u.id.message,set_value=skip,/app
END

PRO w_thaco_write_iradstr,u
	IF u.inv.psin THEN rstr='normalized psi'
	IF u.inv.ra THEN rstr='normalized minor radius (r/a)'
	IF u.inv.rmid THEN rstr='outboard midplane major radius, RMID, [m]'
	widget_control,u.id.message,set_value='radial grid will be generated by taking '+num2str(u.inv.nr,1)+' evenly spaced points from 0 -> '+num2str(u.inv.rmax,dp=2)+' in '+rstr,/app
END

PRO w_thaco_write_lrstr,u
	widget_control,u.id.message,set_value='radial grid will be loaded from t='+num2str(u.lr.time)+' [sec] from SHOT: '+num2str(u.lr.shot,1)+' THT: '+num2str(u.lr.tht,1), /app
END

PRO w_thaco_write_rhostr,u
	irho=*u.dat.rho
	npts=n(irho)+1
	rhostr=num2str(irho[0],dp=3)
	FOR i=1,npts-1 DO rhostr=rhostr+','+num2str(irho[i],dp=3)
	widget_control,u.id.inv_rho,set_value=rhostr
	widget_control,u.id.run_rho,set_value=rhostr
	widget_control,u.id.message,set_value='RHO='+rhostr+' LOADED',/app		
END

PRO w_thaco_write_goodstr,u
	igood=*u.dat.good
	tmp=where(igood EQ 0)
	IF tmp[0] EQ -1 THEN BEGIN
		badstr='no BAD channels specified'
        ENDIF ELSE BEGIN
		npts=n(tmp)+1		
		badstr=num2str(tmp[0]+1,1)
		FOR i=1,npts-1 DO badstr=badstr+','+num2str(tmp[i]+1,1)
	ENDELSE
	widget_control,u.id.inv_bad,set_value=badstr
	widget_control,u.id.run_bad,set_value=badstr
	tmp=where(igood EQ 1)
	u.inv.min=tmp[0]+1
	u.inv.max=last(tmp)+1
	widget_control,u.id.inv_chmin,set_value=num2str(u.inv.min,1)
	widget_control,u.id.inv_chmax,set_value=num2str(u.inv.max,1)	
END

PRO w_thaco_checktht,u,silent=silent
	HIREXSR_CHECK_ANALYSIS,u.shot,user,time,note,thts,/quiet,tstatus=status
	chk={user:user,time:time,note:note,tht:thts,status:status}
	u.chk=chk
	FOR i=0,n(u.chk.status) DO BEGIN
		chkstr='THT = '+num2str(u.chk.tht[i],1)+' '+u.chk.user[i]+' '+u.chk.time[i]+' '+u.chk.note[i]
		IF u.chk.status[i] THEN IF NOT keyword_set(silent) THEN widget_control,u.id.message,set_value=chkstr,/app
        ENDFOR
END


;MODIFICATION HISTORY:
;	03/17/14:	C. Gao - implemented SETMORDERA button 
PRO w_thaco_event,event
	widget_control,event.top,get_uvalue=u
	id = u.id
	tag = tag_names(event,/st)
	button=' '
	idtags=tag_names(id)
	FOR i=0,n(idtags) DO IF id.(i) EQ event.id THEN ename=idtags[i]
	CASE tag OF
		"WIDGET_BASE" : BEGIN

		END
		"WIDGET_BUTTON": BEGIN
			widget_control,event.id,get_value=button,get_uvalue=uvalue
			IF NOT keyword_set(uvalue) THEN uvalue='none'
			CASE ename OF
	 			"QUIT": BEGIN
					widget_control,event.top,/destroy
					heap_free,u.dat.rho
					heap_free,u.dat.good
					!except=1
				
				END
				"STOP" : BEGIN
					stop
                                END
				"LISTLINES" : BEGIN
					w_thaco_write_linelist,u
				END
				"WCALIB" : BEGIN
					w_hirexsr_calib,shot=u.shot
					widget_control,u.id.message,set_value='Launching Wavelength Calibration Widget',/app
				END
				"XWCALIB" : BEGIN
					w_hirexsr_calib,shot=u.shot
					widget_control,u.id.message,set_value='Launching Wavelength Calibration Widget',/app
				END
				"WDETALIGN" : BEGIN
					w_hirexsr_det_align,shot=u.shot
					widget_control,u.id.message,set_value='Launching Detector Alignment Widget',/app
				END
				"XWDETALIGN" : BEGIN
					w_hirexsr_det_align,shot=u.shot
					widget_control,u.id.message,set_value='Launching Detector Alignment Widget',/app
				END
				"WCRYALIGN" : BEGIN
					widget_control,u.id.message,set_value='W_HIREXSR_CRY_ALIGN not yet available',/app
				END
				"XWCRYALIGN" : BEGIN
					widget_control,u.id.message,set_value='W_HIREXSR_CRY_ALIGN not yet available',/app
				END
				"WBINNING" : BEGIN
					w_hirexsr_binning,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Binning Setup Widget',/app
                                END
				"XWBINNING" : BEGIN
					w_hirexsr_binning,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Binning Setup Widget',/app
                                END				
				"WMOMENTS" : BEGIN
					w_hirexsr_moments,shot=u.shot,line=u.line,tht=u.tht,/load
					widget_control,u.id.message,set_value='Launching Moment Analysis Widget',/app
				END
				"XWMOMENTS" : BEGIN
					w_hirexsr_moments,shot=u.shot,line=u.line,tht=u.tht,/load
					widget_control,u.id.message,set_value='Launching Moment Analysis Widget',/app
                                END
				"XWMOMENTS_OLD" : BEGIN
					w_hirexsr_he_moments,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Old He-like Moment Analysis Widget',/app
                                END
				"WPROFILES" : BEGIN
					w_hirexsr_profiles,shot=u.shot,line=u.line,tht=u.tht,/loaddata
					widget_control,u.id.message,set_value='Launching Inversion Analysis Widget',/app
				END
				"XWPROFILES" : BEGIN
					w_hirexsr_profiles,shot=u.shot,line=u.line,tht=u.tht,/loaddata
					widget_control,u.id.message,set_value='Launching Inversion Analysis Widget',/app
                                END
				"WCOMPARE" : BEGIN
					w_hirexsr_compare,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Profile Comparison Widget',/app
				END
				"XWCOMPARE" : BEGIN
					w_hirexsr_compare,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Profile Comparison Widget',/app
				END		
				"WTIFIT" : BEGIN
					w_hirexsr_tifit,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Ti B-Spline Fitting Widget',/app
				END
				"XWTIFIT" : BEGIN
					w_hirexsr_tifit,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Ti B-Spline Fitting Widget',/app
				END
				"WOMFIT" : BEGIN
					w_hirexsr_omfit,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Omega B-Spline Fitting Widget',/app
				END
				"XWOMFIT" : BEGIN
					w_hirexsr_omfit,shot=u.shot,tht=u.tht
					widget_control,u.id.message,set_value='Launching Omega B-Spline Fitting Widget',/app
                                END
				"READBETAA" : BEGIN
					info=hirexsr_load_info(u.a.morder[1],shot=u.shot,/tree)
					beta=info.m.rot[1]
					widget_control,u.id.message,set_value='BRANCH A BETA='+num2str(beta*180/!pi,dp=2)+' [deg]',/app
					widget_control,u.id.message,set_value='BRANCH A BETA='+num2str(beta,dp=4)+' [rad]',/app
				END
				"SETBETAA" : BEGIN
					ask = dialog_message("Are you sure you know what you're doing?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						hirexsr_change_crystal_beta,u.shot,u.A.beta*!pi/180.0,/nomom,morder=u.A.morder
						widget_control,u.id.message,set_value='Branch A BETA='+num2str(u.A.beta,dp=3)+' written to '+num2str(u.shot,1)+', INFO and POS updated',/app
					ENDIF
				END
				"READGAMMAA" : BEGIN
					info=hirexsr_load_info(u.a.morder[1],shot=u.shot,/tree)
					gamma=info.m.rot[2]
					widget_control,u.id.message,set_value='BRANCH A GAMMA='+num2str(gamma*180/!pi,dp=2)+' [deg]',/app
					widget_control,u.id.message,set_value='BRANCH A GAMMA='+num2str(gamma,dp=4)+' [rad]',/app
				END
				"SETGAMMAA" : BEGIN
					ask = dialog_message("Are you sure you know what you're doing?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						hirexsr_change_crystal_gamma,u.shot,u.A.gamma*!pi/180.0,morder=u.A.morder
						widget_control,u.id.message,set_value='Branch A GAMMA='+num2str(u.A.gamma,dp=3)+' written to '+num2str(u.shot,1)+$
							', INFO and POS updated',/app
					ENDIF
				END
				"SETMORDERA" : BEGIN
                                        ;widget_control,u.id.message,set_value='Feature Currently Not Available',/app
                                        widget_control,u.id.mordera,get_value=mordera
                                        morder=strsplit(mordera,',',/extract)
                                        morder=int(morder)
                                        hirexsr_write_morder,u.shot,morder=morder
                                        widget_control,u.id.message,set_value='Morder ['+num2str(morder[0],1)+', '+num2str(morder[1],1)+', '+num2str(morder[2],1)+'] is applied to Branch A'
				END
				"READBETAB" : BEGIN
					info=hirexsr_load_info(u.b.morder[0],shot=u.shot,/tree)
					beta=info.m.rot[1]
					widget_control,u.id.message,set_value='BRANCH B BETA='+num2str(beta*180/!pi,dp=2)+' [deg]',/app
					widget_control,u.id.message,set_value='BRANCH B BETA='+num2str(beta,dp=4)+' [rad]',/app
				END
				"SETBETAB" : BEGIN
					ask = dialog_message("Are you sure you know what you're doing?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						hirexsr_change_crystal_beta,u.shot,u.B.beta*!pi/180.0,/nomom,morder=u.B.morder
						widget_control,u.id.message,set_value='Branch B BETA='+num2str(u.B.beta,dp=3)+' written to '+num2str(u.shot,1)+', INFO and POS updated',/app
					ENDIF
				END
				"READGAMMAB" : BEGIN
					info=hirexsr_load_info(u.b.morder[0],shot=u.shot,/tree)
					gamma=info.m.rot[2]
					widget_control,u.id.message,set_value='BRANCH B GAMMA='+num2str(gamma*180/!pi,dp=2)+' [deg]',/app
					widget_control,u.id.message,set_value='BRANCH B GAMMA='+num2str(gamma,dp=4)+' [rad]',/app
				END
				"SETGAMMAB" : BEGIN
					ask = dialog_message("Are you sure you know what you're doing?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						hirexsr_change_crystal_gamma,u.shot,u.B.gamma*!pi/180.0,morder=u.B.morder
						widget_control,u.id.message,set_value='Branch B GAMMA='+num2str(u.B.gamma,dp=3)+' written to '+num2str(u.shot,1)+$
							', INFO and POS updated',/app
					ENDIF
				END
				"SETMORDERB" : BEGIN
					widget_control,u.id.message,set_value='Feature Currently Not Available',/app
                                END
				"CHECKCALIB" : BEGIN
					hirexsr_check_calib,u.shot,cshot,ctimes,/quiet,status=status	
					IF NOT status THEN widget_control,u.id.message,set_value='No Calibration Store for SHOT '+num2str(u.shot,1),/app ELSE $
					widget_control,u.id.message,set_value='SHOT '+num2str(u.shot,1)+' calibrated using '+num2str(ctimes[0],dp=2)+$
						' < t < '+num2str(ctimes[1],dp=2)+' of SHOT '+num2str(cshot,1),/app
				END

				"COPYCALIB" : BEGIN
					ask = dialog_message("Overwrite existing CALIBRATION and INFO with values from "+num2str(u.cc.shot,1)+'?', /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						FOR i=0,n(u.cc.m) DO IF u.cc.m[i] THEN hirexsr_copy_calib,u.cc.shot,u.shot,module=i+1
						FOR i=0,n(u.cc.m) DO IF u.cc.m[i] THEN hirexsr_copy_info,u.cc.shot,u.shot,module=i+1
						widget_control,u.id.message,set_value='calibration and INFO copied from '+num2str(u.cc.shot,1),/app
					ENDIF
				END
				"CCM1" : IF event.select EQ 1 THEN u.cc.m[0]=1 ELSE u.cc.m[0]=0
				"CCM2" : IF event.select EQ 1 THEN u.cc.m[1]=1 ELSE u.cc.m[1]=0
				"CCM3" : IF event.select EQ 1 THEN u.cc.m[2]=1 ELSE u.cc.m[2]=0
				"CCM4" : IF event.select EQ 1 THEN u.cc.m[3]=1 ELSE u.cc.m[3]=0
				"AUTOBIN" : BEGIN
					ask = dialog_message("Overwrite existing BINNING with AUTOBIN values?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						IF u.ab.branch[0] THEN BEGIN
							hirexsr_autobin,u.shot,u.ab.nf,[u.ab.t1,u.ab.t2],u.ab.nbins,u.ab.noff,tht=u.tht
							widget_control,u.id.message,set_value='AUTOBIN applied to Branch A',/app
						ENDIF
						IF u.ab.branch[1] THEN BEGIN
							hirexsr_autobin,u.shot,u.ab.nf,[u.ab.t1,u.ab.t2],u.ab.nbins,u.ab.noff,tht=u.tht,/h
							widget_control,u.id.message,set_value='AUTOBIN applied to Branch B',/app
						ENDIF
					ENDIF
				END
				"ABA" : BEGIN
					IF event.select EQ 1 THEN u.ab.branch[0]=1 ELSE u.ab.branch[0]=0
				END
				"ABB" : BEGIN
					IF event.select EQ 1 THEN u.ab.branch[1]=1 ELSE u.ab.branch[1]=0
				END
				"PLOTBINNING" : hirexsr_view_binning,shot=u.shot,tht=u.tht
				"COPYBIN" : BEGIN
					ask = dialog_message("Overwrite existing BINNING with values from "+num2str(u.cb.shot,1)+"?", /default_no, /question)
					IF ask EQ 'Yes' THEN BEGIN
						IF u.cb.branch[0] THEN BEGIN
							hirexsr_copy_binning,u.cb.shot,u.shot,fromtht=u.cb.tht,totht=u.tht,chmap=u.cb.chmap,tmap=u.cb.tmap,good=u.cb.good
							widget_control,u.id.message,set_value='BINNING from THT '+num2str(u.cb.tht,1)+' of '+num2str(u.cb.shot,1)+$
								' applied to Branch A',/app
						ENDIF
						IF u.cb.branch[1] THEN BEGIN
							hirexsr_copy_binning,u.cb.shot,u.shot,fromtht=u.cb.tht,totht=u.tht,chmap=u.cb.chmap,tmap=u.cb.tmap,good=u.cb.good,/h
							widget_control,u.id.message,set_value='BINNING from THT '+num2str(u.cb.tht,1)+' of '+num2str(u.cb.shot,1)+$
								' applied to Branch B',/app
						ENDIF
					ENDIF
				END
				"CBA" : BEGIN
					IF event.select EQ 1 THEN u.cb.branch[0]=1 ELSE u.cb.branch[0]=0
					w_thaco_write_cbstr,u
				END
				"CBB" : BEGIN
					IF event.select EQ 1 THEN u.cb.branch[1]=1 ELSE u.cb.branch[1]=0				
					w_thaco_write_cbstr,u
				END
				"CB_CHMAP" : BEGIN
					IF event.select EQ 1 THEN u.cb.chmap=1 ELSE u.cb.chmap=0
					w_thaco_write_cbstr,u
				END
				"CB_TMAP" : BEGIN
					IF event.select EQ 1 THEN u.cb.tmap=1 ELSE u.cb.tmap=0
					w_thaco_write_cbstr,u
				END
				"CB_GOOD" : BEGIN
					IF event.select EQ 1 THEN u.cb.good=1 ELSE u.cb.good=0
					w_thaco_write_cbstr,u
				END
				"CHECKTHT" : BEGIN
					w_thaco_checktht,u
				END
				"MAKETHT" : BEGIN
					force=0
					IF u.chk.status[u.ct.new] NE 0 THEN BEGIN
						ask = dialog_message("THT="+num2str(u.ct.new,1)+" already exists, do you want to overwrite?", /default_no, /question)
						IF ask EQ 'Yes' THEN force=1
                                        ENDIF ELSE ask='Yes'

					IF ask EQ 'Yes' THEN BEGIN
						hirexsr_addnew_analysis,u.shot,tht=u.ct.new,force=force
						widget_control,u.id.message,set_value='THT '+num2str(u.ct.new,1)+' added to '+num2str(u.shot,1),/app
						IF total(u.ct.bin+u.ct.mom+u.ct.prof) NE 0 THEN BEGIN
							result=hirexsr_clone_analysis(u.shot,u.line,u.ct.from,u.ct.new,nobin=1-u.ct.bin,nomom=1-u.ct.mom,nopro=1-u.ct.prof,/add)
							IF result EQ 1 THEN widget_control,u.id.message,set_value='results copied from THT='+num2str(u.tht,1)+' to new THT',/app ELSE $
								widget_control,u.id.message,set_value='ERROR in HIREXSR_CLONE_ANALYSIS - results not copied to new THT',/app
						ENDIF
                                        ENDIF 
				END
				"CT_BIN" : BEGIN
					IF event.select EQ 1 THEN u.ct.bin=1 ELSE u.ct.bin=0
					w_thaco_write_ctstr,u
				END
				"CT_MOM" : BEGIN
					IF event.select EQ 1 THEN u.ct.mom=1 ELSE u.ct.mom=0
					w_thaco_write_ctstr,u
				END
				"CT_PROF" : BEGIN
					IF event.select EQ 1 THEN u.ct.prof=1 ELSE u.ct.prof=0
					w_thaco_write_ctstr,u
				END
				"AVE_A" : BEGIN
					WIDGET_CONTROL,/hourglass
					hirexsr_avespec2tree,u.shot,double=u.A.dbl,wf=u.A.wf,nave=u.A.nave,tht=u.tht,note=u.A.note
					widget_control,u.id.message,set_value='AVESPEC2TREE run for Branch A of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app			
                                END
				"AVE_DBLA" : IF event.select EQ 1 THEN u.A.dbl=1 ELSE u.A.dble=0
				"AVE_WFA" : BEGIN
					widget_control,u.id.message,set_value='white field calibrations not yet enabled' ,/app
					IF event.select EQ 1 THEN widget_control,u.id.ave_wfa,set_button=0
                                	;IF event.select EQ 1 THEN u.A.wf=1 ELSE u.A.wf=0
				END
				"AVE_B" : BEGIN
					WIDGET_CONTROL,/hourglass
					hirexsr_avespec2tree,u.shot,double=u.B.dbl,wf=u.B.wf,nave=u.B.nave,tht=u.tht,note=u.B.note,/h
  					widget_control,u.id.message,set_value='AVESPEC2TREE run for Branch B of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app			
				END				
				"AVE_DBLB" : IF event.select EQ 1 THEN u.B.dbl=1 ELSE u.B.dble=0
				"AVE_WFB" : BEGIN
					IF event.select EQ 1 THEN widget_control,u.id.ave_wfb,set_button=0
					widget_control,u.id.message,set_value='white field calibrations not yet enabled' ,/app
					;IF event.select EQ 1 THEN u.B.wf=1 ELSE u.B.wf=0
				END
				"FITSPEC" : BEGIN
					WIDGET_CONTROL,/hourglass
					hirexsr_fitspec2tree,u.shot,u.line,nback=u.fit.nback,nofit=u.fit.nofit,noinst=1-u.fit.inst,tree=u.fit.tree,tht=u.tht
					widget_control,u.id.message,set_value='FITSPEC2TREE run for LINE='+num2str(u.line,1)+' of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app
                                END
				"FIT_NOFIT" : BEGIN
					IF event.select EQ 1 THEN u.fit.nofit=1 ELSE u.fit.nofit=0
					w_thaco_write_fitstr,u
				END
				"FIT_INST" : BEGIN
					IF event.select EQ 1 THEN widget_control,u.id.fit_inst,set_button=0
					widget_control,u.id.message,set_value='spatially varying instrumentals not yet enabled' ,/app
					;IF event.select EQ 1 THEN u.fit.inst=1 ELSE u.fit.inst=0
				END	
				"INV_GENRHO" : BEGIN
					IF u.inv.psin THEN rho=make(0,u.inv.rmax,u.inv.nr)
					IF u.inv.ra THEN rho=make(0,u.inv.rmax,u.inv.nr)^2
					*u.dat.rho=rho
					w_thaco_write_rhostr,u
                                END
				"INV_PSIN" : BEGIN
					IF event.select EQ 1 THEN BEGIN
						w_thaco_reset_invrho,u
						widget_control,u.id.inv_psin,set_button=1
						u.inv.psin=1
						w_thaco_write_iradstr,u
                                        ENDIF ELSE widget_control,u.id.inv_psin,set_button=1
				END
				"INV_RA" : BEGIN
					IF event.select EQ 1 THEN BEGIN
						w_thaco_reset_invrho,u
						widget_control,u.id.inv_ra,set_button=1
						u.inv.ra=1
						w_thaco_write_iradstr,u
                                        ENDIF ELSE widget_control,u.id.inv_ra,set_button=1
				END
				"INV_RMID" : BEGIN
					IF event.select EQ 1 THEN widget_control,u.id.inv_rmid,set_button=0
					widget_control,u.id.message,set_value='setting RHOVEC using RMID not yet enabled' ,/app
						
					;IF event.select EQ 1 THEN BEGIN
					;	w_thaco_reset_invrho,u
					;	widget_control,u.id.inv_rmid,set_button=1
					;	u.inv.rmid=1
                                        ;ENDIF ELSE widget_control,u.id.inv_rmid,set_button=1
                                END
				"LOADRHO" : BEGIN
				 	rho=hirexsr_load_rhogrid(u.lr.shot,u.line,u.lr.time,tht=u.lr.tht)
					IF rho[0] NE -1 THEN BEGIN
						*u.dat.rho=rho
						w_thaco_write_rhostr,u
						widget_control,u.id.message,set_value='Radial grid loaded from LINE='+num2str(u.line,1)+' at t='+num2str(u.lr.time,dp=2)+$
							' of SHOT:'+num2str(u.lr.shot,1)+' THT: '+num2str(u.lr.tht,1),/app
                                        ENDIF ELSE widget_control,u.id.message,set_value='ERROR: no radial grid for given SHOT/LINE/THT/TIME',/app
				END
				"LOADGOOD" : BEGIN
					good=hirexsr_load_invgood(u.lr.shot,u.line,u.lr.time,tht=u.lr.tht)
					IF good[0] NE -1 THEN BEGIN
						*u.dat.good=good
						w_thaco_write_goodstr,u
						widget_control,u.id.message,set_value='GOOD Vector loaded from LINE='+num2str(u.line,1)+' at t='+num2str(u.lr.time,dp=2)+$
							' of SHOT:'+num2str(u.lr.shot,1)+' THT: '+num2str(u.lr.tht,1),/app
					ENDIF ELSE widget_control,u.id.message,set_value='ERROR: no GOOD vector for given SHOT/LINE/THT/TIME',/app
				END
				"INVERT" : BEGIN
					WIDGET_CONTROL,/hourglass
					hirexsr_invert2tree,u.shot,u.line,rhovec=*u.dat.rho,good=*u.dat.good,sine=u.inv.sine,tht=u.tht	
					widget_control,u.id.message,set_value='INVERT2TREE run for LINE='+num2str(u.line,1)+' of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app
				END
				"INV_SINE" : BEGIN
					IF event.select EQ 1 THEN BEGIN
						u.inv.sine=1 
						widget_control,u.id.run_sine,set_button=1
						str='Inversions will be done accounting for up/down asymmetry'
                                        ENDIF ELSE BEGIN 
						u.inv.sine=0
						widget_control,u.id.run_sine,set_button=0
						str='Inversions will be done assuming poloidal symmetry'
                                        ENDELSE
					widget_control,u.id.message,set_value=str,/app
				END
				"RUN_SINE" : widget_control,u.id.run_sine,set_button=u.inv.sine
				"RUNTHACO" : BEGIN
					WIDGET_CONTROL,/hourglass
					IF u.branch EQ 0 THEN BEGIN
						hirexsr_avespec2tree,u.shot,double=u.A.dbl,wf=u.A.wf,nave=u.A.nave,tht=u.tht,note=u.A.note
						widget_control,u.id.message,set_value='AVESPEC2TREE run for Branch A of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app			
                                        ENDIF
					IF u.branch EQ 1 THEN BEGIN
						hirexsr_avespec2tree,u.shot,double=u.B.dbl,wf=u.B.wf,nave=u.B.nave,tht=u.tht,note=u.B.note,/h
  						widget_control,u.id.message,set_value='AVESPEC2TREE run for Branch B of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app			
                                        ENDIF
					hirexsr_fitspec2tree,u.shot,u.line,nback=u.fit.nback,nofit=u.fit.nofit,noinst=1-u.fit.inst,tree=u.fit.tree,tht=u.tht
					widget_control,u.id.message,set_value='FITSPEC2TREE run for LINE='+num2str(u.line,1)+' of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app
  					hirexsr_invert2tree,u.shot,u.line,rhovec=*u.dat.rho,good=*u.dat.good,sine=u.inv.sine,tht=u.tht	
					widget_control,u.id.message,set_value='INVERT2TREE run for LINE='+num2str(u.line,1)+' of SHOT: '+num2str(u.shot,1)+' THT='+num2str(u.tht,1),/app
				END
				ELSE:
			ENDCASE
		END
		"WIDGET_SLIDER": BEGIN
			widget_control,event.id,get_value=slider
			IF NOT keyword_set(uvalue) THEN uvalue='none'
			CASE ename OF 
				ELSE:
			ENDCASE
                END
   		"WIDGET_TEXT_CH": BEGIN
			CASE event.id OF 
				u.id.shotid : BEGIN
					widget_control,u.id.shotid,get_value=shot
					u.shot=shot
					w_thaco_write_actstr,u
					w_thaco_checktht,u,/silent
                            	END
				u.id.lineid : BEGIN
					widget_control,u.id.lineid,get_value=line
					u.line=int(line)
					u.branch=w_thaco_line2branch(u.line)
					IF u.branch EQ 0 THEN widget_control,u.id.run_nave,set_value=num2str(u.A.nave,1)
					IF u.branch EQ 1 THEN widget_control,u.id.run_nave,set_value=num2str(u.B.nave,1)
					w_thaco_write_actstr,u
				END
				u.id.thtid : BEGIN
					widget_control,u.id.thtid,get_value=tht
					IF u.chk.status[int(tht)] THEN BEGIN
						u.tht=int(tht)
						w_thaco_write_actstr,u
                                        ENDIF ELSE BEGIN
						widget_control,u.id.thtid,set_value=num2str(u.tht,1)
						widget_control,u.id.message,set_value='THT '+tht+' does not exist' ,/app
					ENDELSE
                           	END
				u.id.betaA : BEGIN
					widget_control,u.id.betaA,get_value=beta
					u.A.beta=float(beta)
				END
				u.id.betaB : BEGIN
					widget_control,u.id.betaB,get_value=beta
					u.B.beta=float(beta)
				END
				u.id.gammaA : BEGIN
					widget_control,u.id.gammaA,get_value=gamma
					u.A.gamma=float(gamma)
				END
				u.id.gammaB : BEGIN
					widget_control,u.id.gammaB,get_value=gamma
					u.B.gamma=float(gamma)
                                END
				u.id.morderA : BEGIN
					
				END
				u.id.morderB : BEGIN
							
				END
				u.id.cc_shot : BEGIN
					widget_control,u.id.cc_shot,get_value=shot
					u.cc.shot=long(shot)
					mstr=''
					FOR i=0,n(u.cc.m) DO IF u.cc.m[i] THEN mstr+=num2str(i+1,1)+' '
					widget_control,u.id.message,set_value='calibration data and INFO files will be copied from shot '+shot+' for modules '+mstr,/app
				END
				u.id.nframe : BEGIN
					widget_control,u.id.nframe,get_value=n
					u.ab.nf=int(n)
                                END
				u.id.tlow : BEGIN
					widget_control,u.id.tlow,get_value=n
					u.ab.t1=float(n)
                                END	
				u.id.thigh : BEGIN
					widget_control,u.id.thigh,get_value=n
					u.ab.t2=float(n)
                                END
				u.id.noff : BEGIN
					widget_control,u.id.noff,get_value=n
					u.ab.noff=int(n)
                                END
				u.id.nbins : BEGIN
					widget_control,u.id.nbins,get_value=n
					u.ab.nbins=int(n)
                                END
				u.id.cb_shot : BEGIN
					widget_control,u.id.cb_shot,get_value=shot
					u.cb.shot=long(shot)
					w_thaco_write_cbstr,u
                                END
				u.id.cb_tht : BEGIN
					widget_control,u.id.cb_tht,get_value=shot
					u.cb.tht=int(shot)
					w_thaco_write_cbstr,u
                                END
				u.id.newtht : BEGIN
					widget_control,u.id.newtht,get_value=tht
					u.ct.new=int(tht)
					w_thaco_write_ctstr,u
				END				
				u.id.ct_tht : BEGIN
					widget_control,u.id.ct_tht,get_value=tht
					u.ct.from=int(tht)
					w_thaco_write_ctstr,u
                                END
				u.id.ave_noteA : BEGIN
					widget_control,u.id.ave_noteA,get_value=note
					u.A.note=note
				END
				u.id.ave_noteB : BEGIN
					widget_control,u.id.ave_noteB,get_value=note
					u.B.note=note
                                END
				u.id.ave_nA : BEGIN
					widget_control,u.id.ave_nA,get_value=n
					u.A.nave=round(float(n))
					w_thaco_write_avestr,u,/A
                                END			
				u.id.ave_nB : BEGIN
					widget_control,u.id.ave_nB,get_value=n
					u.B.nave=round(float(n))
					w_thaco_write_avestr,u,/B
                                END
				u.id.fit_nback : BEGIN
					widget_control,u.id.fit_nback,get_value=n
					u.fit.nback=int(n)
					w_thaco_write_fitstr,u
				END	
				u.id.fit_tree : BEGIN
					widget_control,u.id.fit_tree,get_value=tree
					u.fit.tree=tree
					w_thaco_write_fitstr,u
				END
				u.id.inv_nrho : BEGIN
					widget_control,u.id.inv_nrho,get_value=n
					u.inv.nr=int(n)
					w_thaco_write_iradstr,u
				END
				u.id.inv_rhomax : BEGIN
					widget_control,u.id.inv_rhomax,get_value=n
					u.inv.rmax=float(n)
					w_thaco_write_iradstr,u
				END				
				u.id.lr_shot : BEGIN
					widget_control,u.id.lr_shot,get_value=n
					u.lr.shot=long(n)
					w_thaco_write_lrstr,u
                                END
				u.id.lr_tht : BEGIN
					widget_control,u.id.lr_tht,get_value=n
					u.lr.tht=int(n)
					w_thaco_write_lrstr,u
                                END
				u.id.lr_time : BEGIN
					widget_control,u.id.lr_time,get_value=n
					u.lr.time=float(n)
					w_thaco_write_lrstr,u
                                END
				u.id.inv_chmin : BEGIN					;good[0]=channel #1
					widget_control,u.id.inv_chmin,get_value=n
					u.inv.min=int(n)
					igood=*u.dat.good
					IF u.inv.min NE 1 THEN igood[0:u.inv.min-2]=0
					*u.dat.good=igood
					w_thaco_write_goodstr,u
				END
				u.id.inv_chmax : BEGIN
					widget_control,u.id.inv_chmax,get_value=n
					u.inv.max=int(n)
					igood=*u.dat.good
					IF u.inv.max NE n(igood)+1 THEN igood[u.inv.max:*]=0
					*u.dat.good=igood
					w_thaco_write_goodstr,u
                                END
				u.id.inv_bad : BEGIN
					widget_control,u.id.inv_bad,get_value=badstr
					ibad=int(strsplit(badstr,',',/extract))
					igood=*u.dat.good
					igood[*]=1
					igood[ibad-1]=0
					*u.dat.good=igood
					w_thaco_write_goodstr,u
				END
			ENDCASE
		END
		ELSE:
	ENDCASE
	IF button NE 'QUIT' THEN widget_control,event.top,set_uvalue=u		
END

PRO w_thaco,shot=shot,tht=tht,line=line
	font='-adobe-symbol-medium-r-normal--12-120-75-75-p-74-adobe-fontspecific'
	user=logname()
	mdim=get_screen_size()
	IF mdim[0] NE 1600 AND mdim[1] NE 1200 THEN base0=widget_base(title='The HIREXSR Analysis COde (THACO)',/column,tlb_size_events=1,$\
		/scroll,x_scroll_size=400,y_scroll_size=mdim[1]*0.85) ELSE base0=widget_base(title='The HIREXSR Analysis COde (THACO)',/column,tlb_size_events=1)
	base=widget_base(base0,/column)
	tabs=widget_tab(base,location=3)
	xsize=350
	ysize=500
	t0=widget_base(tabs,title=' WIDGETS ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	tA=widget_base(tabs,title=' CALIB ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	tB=widget_base(tabs,title=' BINNING ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	tC=widget_base(tabs,title=' MOMENTS ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	tD=widget_base(tabs,title=' PROFILES ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	tE=widget_base(tabs,title=' COMPARE ',/column,group_leader=base,xsize=xsize,ysize=ysize,/frame)
	space=widget_base(base,/row,ysize=5)
	A=widget_base(base,/row,/frame)
	dum=widget_label(A,value='(ACTIVE)')
	dum=widget_label(A,value='SHOT: ')
	shotid=widget_text(A,xsize=10,ysize=1,/edit)
	dum=widget_label(A,value='LINE: ')
	lineid=widget_text(A,xsize=5,ysize=1,/edit)
	dum=widget_label(A,value='THT: ')
	thtid=widget_text(A,xsize=5,ysize=1,/edit)
	space=widget_base(base,/row,ysize=5)
	B=widget_base(base,/column,/frame)
	Ba=widget_base(B,/row)
	runthaco=widget_button(Ba,value=' RUN THACO ',tooltip='execute entire THACO analysis for active SHOT/LINE/THT')
	dum=widget_label(Ba,value=' NAVE:')
	run_nave=widget_text(Ba,xsize=5,ysize=1)
	dum=widget_label(Ba,value=' NBACK:')
	run_nback=widget_text(Ba,xsize=5,ysize=1)
	Ba1=widget_base(Ba,/row, /nonexcl)
	run_sine=widget_button(Ba1,value='SINE (m=1)')
	Bb=widget_base(B,/row)
	dum=widget_label(Bb,value='RHO:')
	run_rho=widget_text(Bb,xsize=52,ysize=1)
	Bc=widget_base(B,/row)
	dum=widget_label(Bc,value='BAD:')
	run_bad=widget_text(Bc,xsize=52,ysize=1)


	Bx=widget_base(base,/column,xsize=200,/align_center)
	listlines=widget_button(Bx,value='LIST THACO LINE NUMBERS',tooltip='display a list of THACO line numbers and their wavelengths')
	C=widget_base(base,/row,/frame)
	message = widget_text(C,xsize=55,ysize=10,/scroll,/wrap)
	space=widget_base(base,/row,ysize=5)
	D=widget_base(base,/row)
	quit= widget_button(D,value='QUIT',tooltip='exits the W_THACO widget')
	dum=widget_label(D,value='  ')
	stop= widget_button(D,value='STOP',tooltip='use to return control to terminal for debugging')


	;WIDGETS TAB
	dum=widget_label(t0,value='THACO WIDGETS')
	dum=widget_label(t0,value='=====================================================')

	t0a=widget_base(t0,/column,xsize=200,/align_center)
	wcalib=widget_button(t0a,value='  LAUNCH W_HIREXSR_CALIB  ')
	space=widget_base(t0a,/row,ysize=5)
	wdetalign=widget_button(t0a,value='  LAUNCH W_HIREXSR_DET_ALIGN  ')
	space=widget_base(t0a,/row,ysize=5)
	wcryalign=widget_button(t0a,value='  LAUNCH W_HIREXSR_CRY_ALIGN  ')
	space=widget_base(t0a,/row,ysize=5)
	wbinning=widget_button(t0a,value='  LAUNCH W_HIREXSR_BINNING  ')
	space=widget_base(t0a,/row,ysize=5)
	wmoments=widget_button(t0a,value='  LAUNCH W_HIREXSR_MOMENTS  ')
	space=widget_base(t0a,/row,ysize=5)
	wprofiles=widget_button(t0a,value='  LAUNCH W_HIREXSR_PROFILES  ')
	space=widget_base(t0a,/row,ysize=5)
	wcompare=widget_button(t0a,value='  LAUNCH W_HIREXSR_COMPARE  ')
	space=widget_base(t0a,/row,ysize=5)
	wtifit=widget_button(t0a,value='  LAUNCH W_HIREXSR_TIFIT  ')
	space=widget_base(t0a,/row,ysize=5)
	womfit=widget_button(t0a,value='  LAUNCH W_HIREXSR_OMFIT  ')


	;CALIB TAB
	tA1=widget_base(tA,/column,xsize=200,/align_center)
	xwcalib=widget_button(tA1,value='  LAUNCH W_HIREXSR_CALIB  ')
	space=widget_base(tA1,/row,ysize=5)
	xwdetalign=widget_button(tA1,value='  LAUNCH W_HIREXSR_DET_ALIGN  ')
	space=widget_base(tA1,/row,ysize=5)
	xwcryalign=widget_button(tA1,value='  LAUNCH W_HIREXSR_CRY_ALIGN  ')
	space=widget_base(tA1,/row,ysize=5)
	atabs=widget_tab(tA,location=0,/align_center,xsize=xsize*0.9,ysize=140)
	tAt1=widget_base(atabs,title=' BRANCH A ',/column,group_leader=base)
	tAt2=widget_base(atabs,title=' BRANCH B ',/column,group_leader=base)

	dum=widget_label(tAt1, value="Typically the 'He-like' Branch")
	tAt1a=widget_base(tAt1,/row)
	dum=widget_label(tAt1a,value='b=',font=font)
	betaA=widget_text(tAt1a,xsize=5,ysize=1,/edit)
	dum=widget_label(tAt1a,value='[deg]')
	space=widget_base(tAt1a,/row,xsize=5)
	readbetaA=widget_button(tAt1a,value=' READ ',tooltip='read Branch A crystal declination (beta) from tree')
	setbetaA=widget_button(tAt1a,value=' WRITE ',tooltip='write Branch A crystal declination (beta) to tree')
	dum=widget_label(tAt1a,value='BETA (dec)')
	tAt1b=widget_base(tAt1,/row)
	dum=widget_label(tAt1b,value='g=',font=font)
	gammaA=widget_text(tAt1b,xsize=5,ysize=1,/edit)
	dum=widget_label(tAt1b,value='[deg]')
	space=widget_base(tAt1b,/row,xsize=5)
	readgammaA=widget_button(tAt1b,value=' READ ',tooltip='read Branch A crystal tangency angle (gamma) from tree')
	setgammaA=widget_button(tAt1b,value=' WRITE ',tooltip='write Branch A crystal tangency angle (gamma) to tree')
	dum=widget_label(tAt1b,value='GAMMA (tor)')
	tAt1c=widget_base(tAt1,/row)
	dum=widget_label(tAt1c,value='MORDER: ')
	morderA=widget_text(tAt1c,xsize=10,ysize=1,/edit)
	setmorderA=widget_button(tAt1c,value=' WRITE MORDER ',tooltip='write Branch A MORDER to tree')

	dum=widget_label(tAt2, value="Typically the 'H-like' Branch")
	tAt2a=widget_base(tAt2,/row)
	dum=widget_label(tAt2a,value='b=',font=font)
	betaB=widget_text(tAt2a,xsize=5,ysize=1,/edit)
	dum=widget_label(tAt2a,value='[deg]')
	space=widget_base(tAt2a,/row,xsize=5)
	readbetaB=widget_button(tAt2a,value=' READ ',tooltip='read Branch B crystal declination (beta) from tree')
	setbetaB=widget_button(tAt2a,value=' WRITE ',tooltip='write Branch B crystal declination (beta) to tree')
	dum=widget_label(tAt2a,value='BETA (dec)')
	tAt2b=widget_base(tAt2,/row)
	dum=widget_label(tAt2b,value='g=',font=font)
	gammaB=widget_text(tAt2b,xsize=5,ysize=1,/edit)
	dum=widget_label(tAt2b,value='[deg]')
	space=widget_base(tAt2b,/row,xsize=5)
	readgammaB=widget_button(tAt2b,value=' READ ',tooltip='read Branch B crystal tangency angle (gamma) from tree')
	setgammaB=widget_button(tAt2b,value=' WRITE ',tooltip='write Branch B crystal tangency angle (gamma) to tree')
	dum=widget_label(tAt2b,value='GAMMA (tor)')
	tAt2c=widget_base(tAt2,/row)
	dum=widget_label(tAt2c,value='MORDER: ')
	morderB=widget_text(tAt2c,xsize=10,ysize=1,/edit)
	setmorderB=widget_button(tAt2c,value=' WRITE MORDER ',tooltip='write Branch A MORDER to tree')

	space=widget_base(tA,/row,ysize=5)
	tAx1=widget_base(tA,/column,xsize=xsize*0.9,/align_center,/frame)
	tA2a=widget_base(tAx1,/column,xsize=200,/align_center)
	checkcalib=widget_button(tA2a,value=' CHECK CALIBRATION ',tooltip='Checks the tree for what locked mode shot was used for calibration')
	tA2=widget_base(tAx1,/row,xsize=xsize*0.9,/align_center)
	copycalib=widget_button(tA2,value=' COPY ',tooltip='Use to copy calibration and INFO data from listed shot to active shot')
	dum=widget_label(tA2, value="Calibration Data From Shot: ")
	cc_shot=widget_text(tA2,xsize=10,ysize=1,/edit)
	tA3=widget_base(tAx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tA3, value=" MODULES: ")
	tA3x=widget_base(tA3,/row,/nonexcl)
	ccm1=widget_button(tA3x, value=' 1',tooltip='include/exclude module # 1 when copying calibration')
	ccm2=widget_button(tA3x, value=' 2',tooltip='include/exclude module # 2 when copying calibration')
	ccm3=widget_button(tA3x, value=' 3',tooltip='include/exclude module # 3 when copying calibration')
	ccm4=widget_button(tA3x, value=' 4',tooltip='include/exclude module # 4 when copying calibration')


	;BINNING TAB
	;autobinning
	tB1=widget_base(tB,/column,xsize=200,/align_center)
	xwbinning=widget_button(tB1,value='  LAUNCH W_HIREXSR_BINNING  ')
	space=widget_base(tB,/row,ysize=5)
	tBx1=widget_base(tB,/column,xsize=xsize*0.9,/align_center,/frame)
	tB2=widget_base(tBx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tB2, value="#FRAME")
	nframe=widget_text(tB2,xsize=5,ysize=1,/edit)
	dum=widget_label(tB2, value="from")
	tlow=widget_text(tB2,xsize=5,ysize=1,/edit)
	dum=widget_label(tB2, value="< t <")
	thigh=widget_text(tB2,xsize=5,ysize=1,/edit)
	dum=widget_label(tB2, value="[sec]")
	tB3=widget_base(tBx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tB3, value="  #OFF")
	noff=widget_text(tB3,xsize=5,ysize=1,/edit)
	dum=widget_label(tB3, value="  #BINS/SUBMOD")
	nbins=widget_text(tB3,xsize=5,ysize=1,/edit)
	tB4=widget_base(tBx1,/row,xsize=xsize*0.9,/align_center)
	autobin=widget_button(tB4,value=' AUTOBIN ',tooltip='compute temporal (TMAP) and spatial (CHMAP) binning using above parameters and write to tree')
	tB4x=widget_base(tB4, /row, /nonexcl)
	abA=widget_button(tB4x,value=' BRANCH A ',tooltip='enable/disable AUTOBIN for Branch A')
	abB=widget_button(tB4x,value=' BRANCH B ',tooltip='enable/disable AUTOBIN for Branch B')

	tBpb=widget_base(tB,/column,xsize=200,/align_center)
	space=widget_base(tBpb,/row,ysize=2)
	plotbinning=widget_button(tBpb,value='  PLOT BINNING  ')

	;copy binning
	space=widget_base(tB,/row,ysize=5)
	tBx2=widget_base(tB,/column,xsize=xsize*0.9,/align_center,/frame)
	tB5=widget_base(tBx2,/row,xsize=xsize*0.9,/align_center)
	copybin=widget_button(tB5,value=' COPY ', tooltip='copy spatial/temporal binning from given SHOT/THT')
	dum=widget_label(tB5, value=" Binning Data From Shot: ")
	cb_shot=widget_text(tB5,xsize=10,ysize=1,/edit)
	tB6=widget_base(tBx2,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tB6, value="FROM THT:")
	cb_tht=widget_text(tB6,xsize=5,ysize=1,/edit)
	tB6x=widget_base(tB6,/row,/nonexcl)
	cbA=widget_button(tB6x,value='BRANCH A',tooltip='enable/disable copying BINNING for Branch A')
	cbB=widget_button(tB6x,value='BRANCH B',tooltip='enable/disable copying BINNING for Branch B')
	tB7=widget_base(tBx2,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tB7, value="INCLUDE: ")
	tB7x=widget_base(tB7,/row,/nonexcl)
	cb_chmap=widget_button(tB7x,value=' CHMAP ',tooltip='include/exclude CHMAP when copying binning')
	cb_tmap=widget_button(tB7x,value=' TMAP ',tooltip='include/exclude TMAP when copying binning')
	cb_good=widget_button(tB7x,value=' GOOD ',tooltip='include/exclude GOOD when copying binning')

	;new THACO tree
	space=widget_base(tB,/row,ysize=10)
	tBx3=widget_base(tB,/column,xsize=xsize*0.9,/align_center,/frame)
	tB8=widget_base(tBx3,/column,xsize=200,/align_center)
	checktht=widget_button(tB8,value=' CHECK THT AVAILABILITY ',tooltip='check what THTs (0-10 & 99) have been used')
	tB9=widget_base(tBx3,/row,xsize=xsize*0.9,/align_center)
	maketht=widget_button(tB9,value=' CREATE ',tooltip='create new THACO tree number (THT)')
	dum=widget_label(tB9, value=" new THACO tree (THT) number: ")
	newtht=widget_text(tB9,xsize=5,ysize=1,/edit)
	tB10=widget_base(tBx3,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tB10, value=" from THT: ")
	ct_tht=widget_text(tB10,xsize=5,ysize=1,/edit)
	dum=widget_label(tB10, value="incl.")
	tB10x=widget_base(tB10,/row, /nonexcl)
	ct_bin=widget_button(tB10x,value='BIN',tooltip='include/exclude copying BINNING data to new THT' )
	ct_mom=widget_button(tB10x,value='MOM',tooltip='include/exclude copying FITTING/MOMENT data to new THT')
	ct_prof=widget_button(tB10x,value='PROF',tooltip='include/exclude copying PROFILE data to new THT')


	;MOMENTS TAB
	tC0=widget_base(tC,/column,xsize=250,/align_center)
	xwmoments=widget_button(tC0,value='  LAUNCH W_HIREXSR_MOMENTS  ')
	space=widget_base(tC,/row,ysize=5)
	xwmoments_old=widget_button(tC0,value='   LAUNCH W_HIREXSR_HE_MOMENTS (Legacy)   ')
	space=widget_base(tC,/row,ysize=5)
	atabs=widget_tab(tC,location=0,/align_center,xsize=xsize*0.9)
	tCt1=widget_base(atabs,title=' BRANCH A ',/column,group_leader=base)
	tCt2=widget_base(atabs,title=' BRANCH B ',/column,group_leader=base)

	;avespec
	dum=widget_label(tCt1, value="Typically the 'He-like' Branch")
	tCt1a=widget_base(tCt1,/row)
	dum=widget_label(tCt1a,value='NAVE: ')
	ave_nA=widget_text(tCt1a,xsize=5,ysize=1,/edit)
	tCt1ax=widget_base(tCt1a,/row,/nonexcl)
	ave_dblA=widget_button(tCt1ax,value='DOUBLE',tooltip='compute Branch A spectra using double precision - carries through to FITSPEC')
	ave_wfA=widget_button(tCt1ax,value='WHITE FIELD',tooltip='included white field intensity calibration in analysis for Branch A')
	tCt1b=widget_base(tCt1,/row)
	dum=widget_label(tCt1b,value='NOTE: ')
	ave_noteA=widget_text(tCt1b,xsize=15,ysize=1,/edit)
	ave_A=widget_button(tCt1b,value='  AVESPEC2TREE  ',tooltip='apply binning data to raw data to form AVESPEC for Branch A')
	dum=widget_label(tCt2, value="Typically the 'H-like' Branch")
	tCt2a=widget_base(tCt2,/row)
	dum=widget_label(tCt2a,value='NAVE: ')
	ave_nB=widget_text(tCt2a,xsize=5,ysize=1,/edit)
	tCt2ax=widget_base(tCt2a,/row,/nonexcl)
	ave_dblB=widget_button(tCt2ax,value='DOUBLE',tooltip='compute Branch B spectra using double precision - carries through to FITSPEC')
	ave_wfB=widget_button(tCt2ax,value='WHITE FIELD',tooltip='included white field intensity calibration in analysis for Branch B')
	tCt2b=widget_base(tCt2,/row)
	dum=widget_label(tCt2b,value='NOTE: ')
	ave_noteB=widget_text(tCt2b,xsize=15,ysize=1,/edit)
	ave_B=widget_button(tCt2b,value='  AVESPEC2TREE  ',tooltip='apply binning data to raw data to form AVESPEC for Branch B')

	;fitspec
	space=widget_base(tC,/row,ysize=5)
	tCx1=widget_base(tC,/column,xsize=xsize*0.9,/align_center,/frame)
	tC1=widget_base(tCx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tC1,value='NBACK: ')
	fit_nback=widget_text(tC1,xsize=5,ysize=1,/edit)
	dum=widget_label(tC1,value=' EFIT TREE: ')
	fit_tree=widget_text(tC1,xsize=15,ysize=1,/edit)
	tC2=widget_base(tCx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tC2,value='OPTIONS: ')
	tC2x=widget_base(tC2,/row,/nonexcl)
	fit_nofit=widget_button(tC2x, value='SKIP FIT',tooltip='load spectral fitting from tree, useful if re-running analysis with new spatial calibration')
	fit_inst=widget_button(tC2x, value='INCLUDE INST.',tooltip='include instrumental width and shift in the moment analysis - carries through to INVERT')
	tC3=widget_base(tCx1,/column,xsize=200,/align_center)
	fitspec=widget_button(tC3,value=' FITSPEC2TREE ',tooltip='perform non-linear FITTING and MOMENT generation for active LINE#')	


	;PROFILES TAB
	tD0=widget_base(tD,/column,xsize=200,/align_center)
	xwprofiles=widget_button(tD0,value='  LAUNCH W_HIREXSR_PROFILES  ')
	tDx1=widget_base(tD,/column,xsize=xsize*0.9,/align_center,/frame)
	tD1=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD1,value='RHO: ')
	inv_rho=widget_text(tD1,xsize=35,ysize=1,/edit)
	dum=widget_label(tD1,value='[psin]')
	tD2=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	inv_genrho=widget_button(tD2,value='GENERATE',tooltip='generate a radial grid (in normalized psi) for input into the inversion')
	dum=widget_label(tD2,value='  #R: ')
	inv_nrho=widget_text(tD2,xsize=5,ysize=1,/edit)
	dum=widget_label(tD2,value='  RMAX: ')
	inv_rhomax=widget_text(tD2,xsize=5,ysize=1,/edit)
	tD3=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD3,value='GENERATE RHO IN: ')
	tD3x=widget_base(tD3,/row,/nonexcl)
	inv_psin=widget_button(tD3x,value='PSIN',tooltip='GENERATE will compute values in normalized poloidal flux')
	inv_ra=widget_button(tD3x,value='r/a',tooltip='GENERATE will compute values in r/a=sqrt(psin)')
	inv_rmid=widget_button(tD3x,value='RMID',tooltip='currently not available to GENERATE in RMID')
	tD4=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD4,value='(only for computing input grid, inv. done in PSIN)')
	tD4a=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	loadrho=widget_button(tD4a,value='LOAD RHO',tooltip='load radial grid from given SHOT/THT/TIME for the active LINE')
	dum=widget_label(tD4a,value=' from SHOT: ')
	lr_shot=widget_text(tD4a,xsize=10,ysize=1,/edit)
	tD4b=widget_base(tDx1,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD4b,value='                 THT: ')
	lr_tht=widget_text(tD4b,xsize=5,ysize=1,/edit)
	dum=widget_label(tD4b,value=' TIME: ')
	lr_time=widget_text(tD4b,xsize=5,ysize=1,/edit)
	space=widget_base(tD,/row,ysize=10)
	tDx2=widget_base(tD,/column,xsize=xsize*0.9,/align_center,/frame)
	tD5a=widget_base(tDx2,/row,xsize=xsize*0.9,/align_center)

	loadgood=widget_button(tD5a,value='LOAD GOOD',tooltip='load GOOD vector from given SHOT/THT/TIME for the active LINE')
	dum=widget_label(tD5a,value=' (use SHOT/THT/TIME above) ')
	tD5=widget_base(tDx2,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD5,value='GOOD RANGE   ')
	dum=widget_label(tD5,value='MIN: ')
	inv_chmin=widget_text(tD5,xsize=5,ysize=1,/edit)
	dum=widget_label(tD5,value='MAX: ')
	inv_chmax=widget_text(tD5,xsize=5,ysize=1,/edit)
	tD6=widget_base(tDx2,/row,xsize=xsize*0.9,/align_center)
	dum=widget_label(tD6,value='BAD: ')
	inv_bad=widget_text(tD6,xsize=35,ysize=1,/edit)
	space=widget_base(tD,/row,ysize=10)
	tDx3=widget_base(tD,/column,xsize=xsize*0.9,/align_center,/frame)
	tD7=widget_base(tDx3,/row,xsize=xsize*0.9,/align_center)
	invert=widget_button(tD7,value='  INVERT2TREE  ',tooltip='performs the inversion of the moment profiles')
	dum=widget_label(tD7,value='   ')
	tD7x=widget_base(tD7,/row,/nonexcl)
	inv_sine=widget_button(tD7x,value='SINE (m=1)',tooltip='enable/disable inclusion of the m=1 sine terms in the inversion for the full poloidal view')

	;COMPARE TAB
	tE1=widget_base(tE,/column,xsize=200,/align_center)
	xwcompare=widget_button(tE1,value='  LAUNCH W_HIREXSR_COMPARE  ')
	xwtifit=widget_button(tE1,value='  LAUNCH W_HIREXSR_TIFIT  ')
	xwomfit=widget_button(tE1,value='  LAUNCH W_HIREXSR_OMFIT  ')

	IF NOT keyword_set(shot) THEN shot=1120224012
	IF NOT keyword_set(tht) THEN tht=0
	IF NOT keyword_set(line) THEN line=2
	branch=w_thaco_line2branch(line)
	
	id={base0:base0,base:base,shotid:shotid,lineid:lineid,thtid:thtid,quit:quit,stop:stop,listlines:listlines,message:message,$
		runthaco:runthaco,run_nave:run_nave,run_nback:run_nback,run_sine:run_sine,run_rho:run_rho,run_bad:run_bad,$
		wcalib:wcalib,wdetalign:wdetalign,wcryalign:wcryalign,wbinning:wbinning,wmoments:wmoments,wprofiles:wprofiles,wcompare:wcompare,$
		wtifit:wtifit,womfit:womfit,$
		xwcalib:xwcalib,xwdetalign:xwdetalign,xwcryalign:xwcryalign,$
		betaA:betaA,readbetaA:readbetaA,setbetaA:setbetaA,gammaA:gammaA,readgammaA:readgammaA,setgammaA:setgammaA,morderA:morderA,setmorderA:setmorderA,$
		betaB:betaB,readbetaB:readbetaB,setbetaB:setbetaB,gammaB:gammaB,readgammaB:readgammaB,setgammaB:setgammaB,morderB:morderB,setmorderB:setmorderB,$
		checkcalib:checkcalib,copycalib:copycalib,cc_shot:cc_shot,ccm1:ccm1,ccm2:ccm2,ccm3:ccm3,ccm4:ccm4,$
		xwbinning:xwbinning,$
		nframe:nframe,tlow:tlow,thigh:thigh,noff:noff,nbins:nbins,autobin:autobin,abA:abA,abB:abB,plotbinning:plotbinning,$
		copybin:copybin,cb_shot:cb_shot,cb_tht:cb_tht,cbA:cbA,cbB:cbB,cb_chmap:cb_chmap,cb_tmap:cb_tmap,cb_good:cb_good,$
		checktht:checktht,maketht:maketht,newtht:newtht,ct_tht:ct_tht,ct_bin:ct_bin,ct_mom:ct_mom,ct_prof:ct_prof,$
		xwmoments:xwmoments,xwmoments_old:xwmoments_old,$
		ave_nA:ave_nA,ave_dblA:ave_dblA,ave_wfA:ave_wfA,ave_noteA:ave_noteA,ave_A:ave_A,$
		ave_nB:ave_nB,ave_dblB:ave_dblB,ave_wfB:ave_wfB,ave_noteB:ave_noteB,ave_B:ave_B,$
		fit_nback:fit_nback, fit_tree:fit_tree,fit_nofit:fit_nofit,fit_inst:fit_inst,fitspec:fitspec,$
		xwprofiles:xwprofiles,$
		inv_rho:inv_rho,inv_genrho:inv_genrho,inv_nrho:inv_nrho,inv_rhomax:inv_rhomax,inv_psin:inv_psin,inv_ra:inv_ra,inv_rmid:inv_rmid,$
		loadrho:loadrho,lr_shot:lr_shot,lr_tht:lr_tht,lr_time:lr_time,$
		loadgood:loadgood,inv_chmin:inv_chmin,inv_chmax:inv_chmax,inv_bad:inv_bad,$
		invert:invert,inv_sine:inv_sine,$
		xwcompare:xwcompare,xwtifit:xwtifit,xwomfit:xwomfit}

	A={beta:0.0,gamma:0.0,morder:[1,2,3],nave:0,note:'x',dbl:0,wf:0}
	B={beta:0.0,gamma:0.0,morder:[4],nave:0,note:'x',dbl:0,wf:0}
	cc={shot:long(0),m:[1,1,1,1]}
	ab={nf:2,t1:0.5,t2:1.5,noff:5,nbins:2,branch:[1,0]}
	cb={shot:long(0),tht:0,branch:[1,0],chmap:1,tmap:1,good:1}
	ct={new:1,from:0,bin:0,mom:0,prof:0}
	fit={nback:0,tree:'ANALYSIS',nofit:0,inst:0}
	inv={rho:'default RHOVEC will be used',nr:25,rmax:0.95,psin:0,ra:1,rmid:0,min:0,max:0,bad:'all channels used for inversion',sine:1}
	lr={shot:long(0),tht:0,time:1.0}
	dat={rho:ptr_new([0],/allocate_heap),good:ptr_new([0],/allocate_heap)}
	HIREXSR_CHECK_ANALYSIS,shot,user,time,note,thts,/quiet,tstatus=status
	chk={user:user,time:time,note:note,tht:thts,status:status}

	u={id:id,shot:shot,line:line,tht:tht,branch:branch,cc:cc,cb:cb,ab:ab,ct:ct,fit:fit,inv:inv,lr:lr,dat:dat,chk:chk,A:A,B:B}
	widget_control,base0,set_uvalue=u
	widget_control,u.id.shotid,set_value=num2str(u.shot,1)
	widget_control,u.id.lineid,set_value=num2str(u.line,1)
	widget_control,u.id.thtid,set_value=num2str(u.tht,1)
	widget_control,u.id.betaA,set_value=num2str(u.A.beta,dp=3)
	widget_control,u.id.betaB,set_value=num2str(u.B.beta,dp=3)
	widget_control,u.id.gammaA,set_value=num2str(u.A.gamma,dp=3)
	widget_control,u.id.gammaB,set_value=num2str(u.B.gamma,dp=3)
	widget_control,u.id.ccm1,set_button=u.cc.m[0]
	widget_control,u.id.ccm2,set_button=u.cc.m[1]
	widget_control,u.id.ccm3,set_button=u.cc.m[2]
	widget_control,u.id.ccm4,set_button=u.cc.m[3]
	widget_control,u.id.cc_shot,set_value=num2str(u.cc.shot,1)
	widget_control,u.id.nframe,set_value=num2str(ab.nf,1)
	widget_control,u.id.tlow,set_value=num2str(ab.t1,dp=2)
	widget_control,u.id.thigh,set_value=num2str(ab.t2,dp=2)
	widget_control,u.id.noff,set_value=num2str(ab.noff,1)
	widget_control,u.id.nbins,set_value=num2str(ab.nbins,1)
	widget_control,u.id.abA,set_button=u.ab.branch[0]
	widget_control,u.id.abB,set_button=u.ab.branch[1]
	widget_control,u.id.cb_shot,set_value=num2str(u.cb.shot,1)
	widget_control,u.id.cb_tht,set_value=num2str(u.cb.tht,1)
	widget_control,u.id.cbA,set_button=u.cb.branch[0]
	widget_control,u.id.cbB,set_button=u.cb.branch[1]
	widget_control,u.id.cb_chmap,set_button=u.cb.chmap[0]
	widget_control,u.id.cb_tmap,set_button=u.cb.tmap[0]
	widget_control,u.id.cb_good,set_button=u.cb.good[0]
	widget_control,u.id.newtht,set_value=num2str(u.ct.new,1)
	widget_control,u.id.ct_tht,set_value=num2str(u.ct.from,1)
	widget_control,u.id.ct_bin,set_button=u.ct.bin
	widget_control,u.id.ct_mom,set_button=u.ct.mom
	widget_control,u.id.ct_prof,set_button=u.ct.prof
	widget_control,u.id.ave_nA,set_value=num2str(u.A.nave,1)
	widget_control,u.id.ave_noteA,set_value=u.A.note
	widget_control,u.id.ave_nB,set_value=num2str(u.B.nave,1)
	widget_control,u.id.ave_noteB,set_value=u.B.note
	widget_control,u.id.fit_nback,set_value=num2str(u.fit.nback,1)
	widget_control,u.id.fit_tree,set_value=u.fit.tree
	widget_control,u.id.inv_rho,set_value=u.inv.rho
	widget_control,u.id.inv_nrho,set_value=num2str(u.inv.nr,1)
	widget_control,u.id.inv_rhomax,set_value=num2str(u.inv.rmax,dp=2)
	widget_control,u.id.inv_psin,set_button=u.inv.psin
	widget_control,u.id.inv_ra,set_button=u.inv.ra
	widget_control,u.id.inv_rmid,set_button=u.inv.rmid
	widget_control,u.id.lr_shot,set_value=num2str(u.lr.shot,1)
	widget_control,u.id.lr_tht,set_value=num2str(u.lr.tht,1)
	widget_control,u.id.lr_time,set_value=num2str(u.lr.time,dp=2)	
	widget_control,u.id.inv_chmin,set_value=num2str(u.inv.min,1)
	widget_control,u.id.inv_chmax,set_value=num2str(u.inv.max,1)
	widget_control,u.id.inv_bad,set_value=u.inv.bad
	widget_control,u.id.inv_sine,set_button=u.inv.sine
	IF u.branch EQ 0 THEN widget_control,u.id.run_nave,set_value=num2str(u.A.nave,1)
	IF u.branch EQ 1 THEN widget_control,u.id.run_nave,set_value=num2str(u.B.nave,1)
	widget_control,u.id.run_nback,set_value=num2str(u.fit.nback,1)
	widget_control,u.id.run_rho,set_value=u.inv.rho
	widget_control,u.id.run_bad,set_value=u.inv.bad
	widget_control,u.id.run_sine,set_button=u.inv.sine

	w_thaco_write_morder,u,/A,/B
	

	!except=0
	widget_control,base0,/realize
	xmanager,'w_thaco',base0
END
